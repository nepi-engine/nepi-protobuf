// NEPI Dual-Use License
// Project: nepi-protobuf
//
// This license applies to any user of NEPI Engine software
//
// Copyright (C) 2023 Numurus, LLC <https://www.numurus.com>
// see https://github.com/numurus-nepi/nepi-protobuf
//
// This software is dual-licensed under the terms of either a NEPI software developer license
// or a NEPI software commercial license.
//
// The terms of both the NEPI software developer and commercial licenses
// can be found at: www.numurus.com/licensing-nepi-engine
//
// Redistributions in source code must retain this top-level comment block.
// Plagiarizing this software to sidestep the license obligations is illegal.
//
// Contact Information:
// ====================
// - https://www.numurus.com/licensing-nepi-engine
// - mailto:nepi@numurus.com
//
syntax = "proto3";

import "timestamp.proto";

option cc_enable_arenas = true;

// Sys status components added by NEPI-BOT, not provided by device
message SystemStatusNEPIBot {
	uint32 sys_status_id = 1; // Unique identifier to correlate status and data
	uint32 nepi_bot_status_flags = 2; // Bitmask of NEPI status -- bit positional definitions TBD
}

// Sys status components provided by device
message SystemStatusDevice {
	google.protobuf.Timestamp timestamp = 1; // Time at which this message was created
	sint32 navsat_fix_time_offset = 2; // Milliseconds since timestamp for included navigation fix (negative value indicates prior to timestamp)
	oneof latitude {
		float defined_latitude = 3; // Latitude in degrees, Positive north of equator
	}
	oneof longitude {
		float defined_longitude = 4; // Longitude in degrees, Positive east of Prime Meridian
	}
	oneof heading {
		uint32 defined_heading = 5; // Heading in millidegrees
	}
	bool heading_true_north = 6; // True indicates heading is w.r.t. true north, false indicates w.r.t. magnetic north
	sint32 roll = 7; // Roll angle in millidegrees
	sint32 pitch = 8; // Pitch angle in millidegrees
	sint32 temperature = 9; // Main temperature, decidegrees C
	uint32 power_state = 10; // Represents current power state, user specified (typically as a percentage of total 0 - 100)
	bytes device_status = 11; // Device defined byte stream; passed directly without parsing/interpretation by NEPI
}

// The Complete NEPI System Status Message
message SystemStatus {
	// NEPI-BOT Populated
	SystemStatusNEPIBot nepi_bot_status = 1;
	SystemStatusDevice device_status = 2;
}

// (Meta)data components provided by NEPI-BOT
message DataMsgNEPIBot {
	uint32 sys_status_id = 1; // Unique identifier for the corresponding SystemStatus message (to correlate Data and SystemStatus)
	string file_extension = 2; // Indicates the extension (if any) to add to the file constructed from DataMsgDevice::payload
}

// (Meta)data components provided by Device
message DataMsgDevice {

	// Device Populated
	string type = 2; // Identifier for the type or source of data
	uint32 instance = 3; // To differentiate between between data that is generated by the same source (type)
	sint32 data_time_offset = 4; // Milliseconds since corresponding SystemStatus timestamp
	float latitude_offset = 5; // Microdegrees difference from latitude in corresponding SystemStatus message
	float longitude_offset = 6; // Microdegrees difference from longitude in corresponding SystemStatus message
	sint32 heading_offset = 7; // Millidegrees difference from heading in corresponding SystemStatus message
	sint32 roll_offset = 8; // Millidegrees difference from roll in corresponding SystemStatus message
	sint32 pitch_offset = 9; // Millidegrees difference from pitch in corresponding SystemStatus message
	bytes payload = 10; // Raw bytes of data -- decompressed and/or interpreted by device-custom scripts on Server
}

// The NEPI Complete Data Message
message DataMsg {
	DataMsgNEPIBot nepi_bot_metadata = 1;
	DataMsgDevice device_data = 2;
}

// Generic message type to represent a single string-or-numerically-keyed value
message SystemValue {
	oneof identifier {
		string str_identifier = 3;
		uint32 num_identifier = 4;
	}

	oneof value {
		double double_val = 5;
		float float_val = 6;
		int64 int64_val = 7;
		uint64 uint64_val = 8;
		bool bool_val = 9;
		string string_val = 10;
		bytes raw_val = 11;
	}
}

// NEPI
message NEPIMsgRouting {
	uint32 response_index = 1; // Contains the request comm index if this is a response
	enum Subsystem {
		NEPI = 0;
		DEVICE = 1;
	}
	Subsystem subsystem = 2; // Originator (DO) or target (DT) of the message
}

message CfgMsg {
	NEPIMsgRouting routing = 1;
	repeated SystemValue cfg_val = 2; // Multiple value requests or responses allowed in one cfg message
}

message GeneralMsg { // Alerts, Commands, Etc.
	NEPIMsgRouting routing = 1;
	SystemValue msg_payload = 2;
}

message NEPIMsg {
	uint32 comm_index = 1; // Server-bot coordination index if in use
	bytes nuid = 2; // NEPI unique identifier for the sender (DO) or receiver (DT) of the message
	oneof msg {
		SystemStatus sys_status = 3;
		DataMsg data_msg = 4;
		CfgMsg cfg_msg = 5;
		GeneralMsg gen_msg = 6;
	}
}
